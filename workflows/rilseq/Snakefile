import sys
import os
from textwrap import dedent
import yaml
import tempfile
import pandas as pd
import numpy as np

configfn = 'config/config.yaml'
config = yaml.safe_load(open(configfn))

sampletable = pd.read_csv('config/sampletable.tsv', sep='\t')

genome_fa = config['references_dir'] + '/' + \
    config['organism'] + '/' + \
    config['aligner']['tag'] + '/genome/bwa-mem/' + \
    config['organism'] + \
    '_' + \
    config['aligner']['tag'] + \
    '.fasta'

genome_gff = '../references/references_data/ecoli/default/annotation/ecoli_default.gtf'


# ----------------------------------------------------------------------------
# TARGETS
# ----------------------------------------------------------------------------

rule targets:
    """
    Final targets to create
    """
    input:
        expand('data/rnaseq_rilseq/{sample}/{sample}_{frac}_fragments.txt',
               sample=sampletable['samplename'], frac=['all', 'significant']),
        expand('data/rnaseq_rilseq/{sample}/{sample}_{frac}.bed',
               sample=sampletable['samplename'], frac=['all', 'significant']),
        expand('data/rnaseq_rilseq/{sample}/{sample}_circos_plot.svg',
               sample=sampletable['samplename']),
        expand('data/rnaseq_rilseq/{sample}/{sample}_R1.cutadapt.fastq_bwa.bam.rillibsize',
               sample=sampletable['samplename']),
        # unified samples
        expand('data/rnaseq_rilseq/{sample}_unified/{sample}_unified_{frac}_fragments.txt',
               sample=sampletable['group'], frac=['all', 'significant']),
        expand('data/rnaseq_rilseq/{sample}/{sample}_{frac}.bed',
               sample=sampletable['group']+'_unified', frac=['all', 'significant']),
        expand('data/rnaseq_rilseq/{sample}/{sample}_circos_plot.svg',
               sample=sampletable['group']+'_unified'),
        expand('data/rnaseq_rilseq/{sample}/{sample}_R1.cutadapt.fastq_bwa.bam.rillibsize',
               sample=sampletable['group']+'_unified'),
        # counts
        expand('data/rnaseq_rilseq/{sample}/{sample}_{sub}_subset.bam',
               sample=sampletable['samplename'], sub = ['single', 'chimera']),
        expand('data/rnaseq_rilseq/featurecounts_{sub}.txt',
               sub = ['single', 'chimera']),





# ----------------------------------------------------------------------------
# RULES
# ----------------------------------------------------------------------------


rule map_single_fragments:
    input:
        r1 = 'data/rnaseq_samples/{sample}/{sample}_R1.cutadapt.fastq.gz',
        r2 = 'data/rnaseq_samples/{sample}/{sample}_R2.cutadapt.fastq.gz',
        fa = genome_fa,
        gff = genome_gff,
        fai = genome_fa + '.bwt'
    log:
        'logs/map_single_fragments_{sample}.log'
    output:
        'data/rnaseq_rilseq/{sample}/{sample}_R1.cutadapt.fastq_bwa.bam',
        'data/rnaseq_rilseq/{sample}/{sample}_R1.cutadapt.fastq_bwa.bam.bai'
    threads: 8
    resources:
        mem_mb=32*1024,
        disk_mb=32*1024,
        runtime=240
    params:
        dirout = 'data/rnaseq_rilseq/{sample}'
    shell:
        'map_single_fragments.py  '
        '{input.fa} '
        '-g {input.gff} '
        '-1 {input.r1} '
        '-2 {input.r2} '
        '-d {params.dirout} '
        '-o {wildcards.sample} '
        '-r '
        '--feature exon '
        '--create_wig '


rule libsize:
    input:
        bam = 'data/rnaseq_rilseq/{sample}/{sample}_R1.cutadapt.fastq_bwa.bam',
    log:
        'logs/libsize_{sample}.log'
    output:
        'data/rnaseq_rilseq/{sample}/{sample}_R1.cutadapt.fastq_bwa.bam.rillibsize'
    threads: 1
    resources:
        mem_mb=4*1024,
        disk_mb=4*1024,
        runtime=2*60
    shell:
        'samtools view -c {input.bam} > {output[0]}; '
        'samtools view -c -F 260 {input.bam} >> {output[0]}'


rule map_chimeric_fragments:
    input:
        bam = 'data/rnaseq_rilseq/{sample}/{sample}_R1.cutadapt.fastq_bwa.bam',
        bai = 'data/rnaseq_rilseq/{sample}/{sample}_R1.cutadapt.fastq_bwa.bam.bai',
        fa = genome_fa,
        gff = genome_gff
    log:
        'logs/map_chimeric_fragments_{sample}.log'
    output:
        'data/rnaseq_rilseq/{sample}/{sample}_all_fragments.txt'
    threads: 8
    resources:
        mem_mb=128*1024,
        disk_mb=128*1024,
        runtime=24*60
    params:
        dirout = 'data/rnaseq_rilseq/{sample}'
    shell:
        'map_chimeric_fragments.py '
        '--dirout {params.dirout} '
        '-r '       # reverse stranded library
        '-t {input.gff} '
        '{input.fa} '
        '{input.bam} '
        '> {output[0]} '


rule significant_regions:
    input:
        txt = 'data/rnaseq_rilseq/{sample}/{sample}_all_fragments.txt',
        bam = 'data/rnaseq_rilseq/{sample}/{sample}_R1.cutadapt.fastq_bwa.bam'
    log:
        'logs/significant_regions_{sample}.log'
    resources:
        mem_mb=32*1024,
        disk_mb=32*1024,
        runtime=240
    output:
        'data/rnaseq_rilseq/{sample}/{sample}_significant_fragments.txt'
    shell:
        'RILseq_significant_regions.py '
        '--total_reverse '  # library is reverse stranded
        '--ribozero '       # Remove rRNA prior to the statistical analysis.')
        '--BC_chrlist "chr" '
        '--total_RNA {input.bam} '      # Normalize in total RNA from these bam files
        '{input.txt} '       # all_fragments.txt
        '> {output[0]} '



rule generate_BED:
    input:
        reads='data/rnaseq_rilseq/{sample}/{sample}_all_fragments.txt',
        fa=genome_fa,
        bam='data/rnaseq_rilseq/{sample}/{sample}_R1.cutadapt.fastq_bwa.bam'
    log:
        'logs/generate_BED_{sample}.log'
    resources:
        mem_mb=128*1024,
        disk_mb=128*1024,
        runtime=120
    output:
        'data/rnaseq_rilseq/{sample}/{sample}_all.bed'
    shell:
        'generate_BED_file_of_endpoints.py '
        '{input.fa} '
        '{input.reads} '
        '{wildcards.sample}_all '
        '{wildcards.sample}_all '
        '{input.bam} '
        '> {output[0]}'

rule generate_BED_sig:
    input:
        reads='data/rnaseq_rilseq/{sample}/{sample}_all_fragments.txt',
        summary='data/rnaseq_rilseq/{sample}/{sample}_significant_fragments.txt',
        fa=genome_fa,
        bam='data/rnaseq_rilseq/{sample}/{sample}_R1.cutadapt.fastq_bwa.bam'
    log:
        'logs/generate_BED_{sample}.log'
    resources:
        mem_mb=128*1024,
        disk_mb=128*1024,
        runtime=120
    output:
        'data/rnaseq_rilseq/{sample}/{sample}_significant.bed'
    shell:
        'generate_BED_file_of_endpoints.py '
        '-s {input.summary} '
        '{input.fa} '
        '{input.reads} '
        '{wildcards.sample}_significant '
        '{wildcards.sample}_significant '
        '{input.bam} '
        '> {output[0]}'


rule prep_interactions_plot:
    """
    This makes the circos plot file, used to later plot the interactions
    """
    input:
        reads='data/rnaseq_rilseq/{sample}/{sample}_all_fragments.txt',
        summary='data/rnaseq_rilseq/{sample}/{sample}_significant_fragments.txt',
    log:
        'logs/prep_interactions_plot_{sample}.log'
    resources:
        mem_mb=64*1024,
        disk_mb=64*1024,
        runtime=120
    output:
        'data/rnaseq_rilseq/{sample}/{sample}_circos_plot.txt'
    shell:
        'plot_circos_plot.py '
        '{input.reads} '
        '-s {input.summary} '
        '> {output[0]}'

rule plot_interactions:
    """
    This plots the circos plot file
    """
    input:
        txt='data/rnaseq_rilseq/{sample}/{sample}_circos_plot.txt',
    log:
        'logs/plot_interactions_{sample}.log'
    conda:
        '../rilseq/env-circos.yml'
    resources:
        mem_mb=1024,
        disk_mb=1024,
        runtime=120
    output:
        'data/rnaseq_rilseq/{sample}/{sample}_circos_plot.svg'
    shell:
        # from ../rilseq/RILseq-master/data/E_coli_K12/plot_interactions.sh:
        'circos '
        '-conf ../rilseq/RILseq-master/data/E_coli_K12/ver2/draw_links.conf '
        '-param links/link/file={input.txt} '
        '-outputfile {output[0]} '


def input_merge_bams(wc):
    """
    Given a group, returns the bam file names of biological replicates
    """
    samples = sampletable.loc[ sampletable['group'] == wc.group, 'samplename']
    return(['data/rnaseq_rilseq/{}/{}_R1.cutadapt.fastq_bwa.bam'.format(sp, sp) for sp in samples])

rule merge_bams:
    input:
        input_merge_bams
    log:
        'logs/merge_bams_{group}.log'
    resources:
        mem_mb=128*1024,
        disk_mb=128*1024,
        runtime=120
    output:
        'data/rnaseq_rilseq/{group}_unified/{group}_unified_R1.cutadapt.fastq_bwa.bam'
    shell:
        'samtools merge -o {output[0]} {input} '
        '&> {log[0]}'

rule index_merged_bams:
    input:
        'data/rnaseq_rilseq/{group}_unified/{group}_unified_R1.cutadapt.fastq_bwa.bam'
    log:
        'logs/index_merged_bams_{group}.log'
    resources:
        mem_mb=128*1024,
        disk_mb=128*1024,
        runtime=120
    output:
        'data/rnaseq_rilseq/{group}_unified/{group}_unified_R1.cutadapt.fastq_bwa.bam.bai'
    shell:
        'samtools index {input[0]} '
        '&> {log[0]}'



# ---------------------------------------------------------
# split BAM files by chimera or single
# count reads in features with featureCounts
# on ALL features
# This is to make the Summary interaction with IP xlsx file
# ---------------------------------------------------------

rule get_read_ids:
    """
    from the all_fragments file,
    get the read IDs for chimera reads
    and for single reads
    """
    input:
        'data/rnaseq_rilseq/{sample}/{sample}_all_fragments.txt'
    log:
        'logs/get_read_ids_{sample}.log'
    output:
        single = 'data/rnaseq_rilseq/{sample}/{sample}_read_IDs_single.txt',
        chimera = 'data/rnaseq_rilseq/{sample}/{sample}_read_IDs_chimera.txt',
    resources:
        mem_mb=32*1024,
        disk_mb=32*1024,
        runtime=240
    run:
        df = pd.read_table(input[0], sep='\t', header=None)
        df.columns = ['chrom_R1', 'start_R1', 'strand_R1',
                      'chrom_R2', 'start_R2', 'strand_R2',
                      'read_ID', 'type']
        df.loc[ df['type'] == 'single', 'read_ID'].to_csv(output.single, sep='\t', header=False, index=False)
        df.loc[ df['type'] == 'chimera', 'read_ID'].to_csv(output.chimera, sep='\t', header=False, index=False)

rule subset_bam:
    """
    using the single or chimera read IDs,
    subset the BAM file
    """
    input:
        bam = 'data/rnaseq_rilseq/{sample}/{sample}_R1.cutadapt.fastq_bwa.bam',
        ids = 'data/rnaseq_rilseq/{sample}/{sample}_read_IDs_{sub}.txt'
    log:
        'logs/subset_bam_{sample}_{sub}.log'
    output:
        'data/rnaseq_rilseq/{sample}/{sample}_{sub}_subset.bam'
    resources:
        mem_mb=32*1024,
        disk_mb=32*1024,
        runtime=240
    shell:
        'samtools view -N {input.ids} -o {output[0]} {input.bam}'

rule featurecounts_RILseq:
    """
    using either the chimera- or single-subseted BAM,
    counts reads in any feature
    """
    input:
        bam = expand('data/rnaseq_rilseq/{sample}/{sample}_{{sub}}_subset.bam', sample = sampletable['samplename']),
        gff = genome_gff
    log:
        'logs/featurecounts_{sub}.log'
    output:
        'data/rnaseq_rilseq/featurecounts_{sub}.txt'
    resources:
        mem_mb=32*1024,
        disk_mb=32*1024,
        runtime=240
    wildcard_constraints:
        sub="chimera|single"
    shell:
        'featureCounts '
        '-a {input.gff} '
        '-t 3UTR,IGR,5UTR,AS,exon,TU,mRNA,other-ncRNA,cis_AS_with_trans_t ' # features to include
        '-g gene_name ' # Specify attribute type in GTF annotation
        '-s 2 '  # reverse stranded library
        '-O '    # Assign reads to all their overlapping meta-features or features
        '-M '    # Multi-mapping reads will also be counted
        '--primary ' # Count primary alignments only
        '--ignoreDup ' # Ignore duplicate reads in read counting. The whole read pair is ignored if one of the reads is a duplicate read for paired end data.
        '-p '    # Specify that input data contain paired-end reads
        '-P '    # Check validity of paired-end distance when counting read pairs. Use -d and -D to set thresholds
        '-B '    # Only count read pairs that have both ends aligned.
        '-o {output[0]} '
        '{input.bam}'






# vim: ft=python
